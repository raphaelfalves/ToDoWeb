@page "/"
@inject IJSRuntime JSRuntime


<PageTitle>@taskList.Title</PageTitle>

    <h1><i class="bi bi-house-door"></i> @taskList.Title</h1>

<div class="row g-1">
    @foreach (var task in taskList.Tasks.Where(x => !x.IsConcluded))
    {
        <div class="col-lg-12 tarefa-div border">
            <div class="d-flex justify-content-between">
                <div class="d-flex">
                    <div class="">
                        <label class="checkbox-container">
                            <input type="checkbox" name="IsConcluded" id="task-@task.Id" @bind="task.IsConcluded" />
                            <div class="custom-checkbox"></div>
                        </label>

                    </div>
                    <div class="ps-2">
                        <div>
                            <label for="task-@task.Id">@task.Title</label>
                        </div>
                        <div>
                            @if (task.DateConclusion?.Date == DateTime.UtcNow.Date)
                            {
                                <div>
                                    <i class="bi bi-brightness-high"></i> Meu dia
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="">
                    <label class="checkbox-isimportant-container">
                        <input type="checkbox" name="IsImportant" id="task-@task.Id" @bind="task.IsImportant" />
                        @if (task.IsImportant)
                        {
                            <i class="bi bi-star-fill"></i>
                        }
                        else
                        {
                            <i class="bi bi-star"></i>
                        }
                    </label>
                </div>
            </div>
        </div>
    }
</div>

<p class="d-inline-flex gap-1 mt-3">
    <button class="btn btn-secondary" @onclick="ToggleCollapse" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="@IsExpanded.ToString().ToLower()" aria-controls="collapseExample">
        <i class="@IconClass"></i> Concluídas @(taskList.CountConcluded)
    </button>
</p>

<div class="collapse @(IsExpanded ? "show" : "")" id="collapseExample">
    <div class="row g-1">
        @foreach (var task in taskList.Tasks.Where(x => x.IsConcluded))
        {
            <div class="col-lg-12 tarefa-div border">
                <div class="d-flex justify-content-between">
                    <div class="d-flex">
                        <div class="">
                            <label class="checkbox-container">
                                <input type="checkbox" name="IsConcluded" id="task-@task.Id" @bind="task.IsConcluded" />
                                <div class="custom-checkbox"></div>
                            </label>

                        </div>
                        <div class="ps-2">
                            <div>
                                <label for="task-@task.Id"><del>@task.Title</del></label>
                            </div>
                            <div>
                                @if (task.DateConclusion == DateTime.UtcNow)
                                {
                                    <div>
                                        <i class="bi bi-brightness-high"></i> Meu dia
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="">
                        <label class="checkbox-isimportant-container">
                            <input type="checkbox" name="IsImportant" id="task-@task.Id" @bind="task.IsImportant" />
                            @if (task.IsImportant)
                            {
                                <i class="bi bi-star-fill"></i>
                            }
                            else
                            {
                                <i class="bi bi-star"></i>
                            }
                        </label>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="input-group fixed m-2">
    <button class="btn btn-outline-secondary" type="button" @onclick="Add" id="button-addon1"><i class="bi bi-plus-lg"></i></button>
    <input type="text" class="form-control" placeholder="Adicionar nova tarefa"
           aria-label="Example text with button addon" aria-describedby="button-addon1"
           required @bind="newTaskTitle" @onkeyup="HandleKeyDown">
</div>



@code {
    private bool IsExpanded { get; set; } = false;
    private string newTaskTitle { get; set; } = string.Empty;

    TaskList taskList = new()
        {
            Title = "Tarefas",
            Id = 1,
            Tasks = new()
        {
            // new()
            // {
            //     Id = 1,
            //     IsConcluded = false,
            //     ListId = 1,
            //     Title = "Conferir CheckList",
            //     DateConclusion = DateTime.UtcNow,
            //     IsImportant = false
            // },
            // new()
            // {
            //     Id = 2,
            //     IsConcluded = false,
            //     ListId = 1,
            //     Title = "Atualizar CheckList",
            //     IsImportant = false
            // },
            // new()
            // {
            //     Id = 3,
            //     IsConcluded = true,
            //     ListId = 1,
            //     Title = "Escrever CheckList",
            //     IsImportant = false
            // },
            // new()
            // {
            //     Id = 4,
            //     IsConcluded = true,
            //     ListId = 1,
            //     Title = "Limpar CheckList",
            //     IsImportant = true
            // }

        }
        };

    private string IconClass => IsExpanded ? "bi bi-chevron-down" : "bi bi-chevron-right";

    void ToggleCollapse()
    {
        IsExpanded = !IsExpanded;
    }

    void Add()
    {
        taskList.Tasks.Add(new()
        {
            Id = taskList.Tasks.Count == 0 ? 1: taskList.Tasks.DefaultIfEmpty().Max(x => x.Id) + 1,
            Title = newTaskTitle,
            ListId = taskList.Id
        });

        newTaskTitle = string.Empty;
    }

    void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Add();
        }
    }
}